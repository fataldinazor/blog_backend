// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  fname     String?    @db.VarChar(128)
  lname     String?    @db.VarChar(128)
  username  String     @unique @db.VarChar(128)
  password  String     @db.VarChar(128)
  createdAt DateTime   @default(now())
  role      Role       @default(USER)
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
}

model Profile {
  id         Int     @id @default(autoincrement())
  avatar_url String? @db.VarChar(255)
  bio        String? @db.VarChar(300)
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  content   String     @db.Text
  image_url String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  published Boolean    @default(false)
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Like {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
  postId Int
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum Role {
  USER
  AUTHOR
  ADMIN
}
